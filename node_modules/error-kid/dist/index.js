var f = Object.defineProperty;
var u = (t, r, n) => r in t ? f(t, r, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[r] = n;
var c = (t, r, n) => u(t, typeof r != "symbol" ? r + "" : r, n);
function i(t) {
  return (r) => r instanceof t;
}
function d(t, r) {
  r || (r = []);
  class n extends Error {
    constructor(...e) {
      const o = typeof r == "function" ? r(...e) : typeof r == "string" ? [r] : r || [];
      super(...o), this.name = t;
    }
  }
  return Object.defineProperty(n, "name", { value: t }), [n, i(n)];
}
function m(t, r, n) {
  class s extends d(t, n)[0] {
    constructor(...a) {
      super(...a);
      c(this, "data");
      this.data = r(...a);
    }
  }
  return Object.defineProperty(s, "name", { value: t }), [s, i(s)];
}
export {
  d as errorClass,
  m as errorClassWithData,
  i as isErrorOfKind
};
//# sourceMappingURL=index.js.map
