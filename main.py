import os
import threading
import subprocess
import time
import requests
import logging
import webbrowser

from flask import Flask, request, redirect, send_from_directory
from werkzeug.middleware.proxy_fix import ProxyFix
from flask_migrate import Migrate

from config import Config
from fck_app.bot import run_bot
from routes import main_bp
from db.models import db

# =============== –ò–º–ø–æ—Ä—Ç Telethon –∏ asyncio ===================
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
# ===================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telethon
API_ID = 21435721
API_HASH = "b77bc7d9879b30b16078564eaa14bf05"
PHONE_NUMBER = "+15812713524"
SESSION_NAME = "my_session"
CHANNELS = [
    "https://t.me/fashionab1ee",
    "https://t.me/testfcknew",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Cloudflare
CLOUDFLARED_PATH = r"C:\Program Files\Cloudflare\cloudflared.exe"
TUNNEL_ID = "3794b256-70f9-4f6c-a5a9-6ae640e8854b"

FLASK_READY = threading.Event()

def configure_logging():
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("app.log")
        ]
    )
    print("[LOGGING] –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def start_cloudflare_tunnel():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Cloudflare —Ç—É–Ω–Ω–µ–ª—å"""
    try:
        print("[CLOUDFLARE] –ó–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è...")
        tunnel_process = subprocess.Popen(
            [
                CLOUDFLARED_PATH,
                "tunnel",
                "--config",
                os.path.join(os.environ["USERPROFILE"], ".cloudflared", "config.yml"),
                "run",
                TUNNEL_ID
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        def log_output(process):
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                print("[CLOUDFLARE]", line.strip())

        def log_errors(process):
            while True:
                line = process.stderr.readline()
                if not line:
                    break
                print("[CLOUDFLARE ERROR]", line.strip())

        threading.Thread(target=log_output, args=(tunnel_process,), daemon=True).start()
        threading.Thread(target=log_errors, args=(tunnel_process,), daemon=True).start()

        return tunnel_process
    except Exception as e:
        print(f"[CLOUDFLARE] üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—É–Ω–Ω–µ–ª—è: {e}")
        return None

def check_site_status(url, timeout=30):
    print(f"[SITE] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ {url}...")
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, verify=False)
            if response.status_code == 200:
                print(f"[SITE] üü¢ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
                return True
        except requests.exceptions.RequestException:
            time.sleep(1)
    print(f"[SITE] üî¥ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
    return False

def create_app(config_class=Config):
    app = Flask(__name__, static_folder="static", template_folder="templates")
    app.config.from_object(config_class)
    app.config["SQLALCHEMY_DATABASE_URI"] = config_class.DATABASE_URI
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

    db.init_app(app)
    migrate = Migrate(app, db)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ProxyFix –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cloudflare
    app.wsgi_app = ProxyFix(
        app.wsgi_app,
        x_for=2,
        x_proto=2,
        x_host=1,
        x_prefix=1,
        x_port=1
    )

    app.register_blueprint(main_bp)

    with app.app_context():
        db.create_all()
        print("\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
        for rule in app.url_map.iter_rules():
            print(f"{rule.endpoint}: {rule.methods} {rule}")
        print("\n")

    @app.before_request
    def before_request():
        if Config.CLOUDFLARE_ENABLED:
            if not request.is_secure and request.headers.get("X-Forwarded-Proto", "http") != "https":
                if not request.host.startswith(("127.0.0.1", "localhost")):
                    url = request.url.replace("http://", "https://", 1)
                    return redirect(url, code=301)

    @app.route("/health")
    def health_check():
        return {"status": "healthy"}, 200

    return app

def run_flask(app):
    app.run(
        host="0.0.0.0",
        port=5000,
        debug=False,
        use_reloader=False
    )

def start_telegram_scraper(flask_app):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Telethon-–∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (daemon=True).
    """
    async def runner():
        client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        async with client:
            await client.start(phone=PHONE_NUMBER)
            logging.info("[TELETHON] –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await telegram_scraper(client, flask_app)
    def thread_target():
        asyncio.run(runner())
    thread = threading.Thread(target=thread_target, daemon=True)
    thread.start()

# ============== ALBUM –û–ë–†–ê–ë–û–¢–ö–ê ===================
pending_albums = {}   # –ö–ª—é—á: grouped_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
ALBUM_TIMEOUT = 2     # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Å–±–æ—Ä–∞ —á–∞—Å—Ç–µ–π –∞–ª—å–±–æ–º–∞

async def telegram_scraper(client, flask_app):
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-—Å–∫—Ä–µ–π–ø–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç grouped_id (–∞–ª—å–±–æ–º), –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω –ø–æ—Å—Ç.
    """
    from db.models import News  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

    @client.on(events.NewMessage(chats=CHANNELS))
    async def new_message_listener(event):
        message = event.message
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–ª—å–±–æ–º—É
        if message.grouped_id:
            gid = message.grouped_id
            if gid not in pending_albums:
                pending_albums[gid] = []
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª—å–±–æ–º–∞ —á–µ—Ä–µ–∑ ALBUM_TIMEOUT —Å–µ–∫—É–Ω–¥
                asyncio.create_task(process_album(gid, client, flask_app))
            pending_albums[gid].append(message)
            return
        else:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            await process_single_message(message, client, flask_app)

    async def process_single_message(message, client, flask_app):
        text = message.message or ""
        image_url = None
        video_url = None

        if message.media:
            if isinstance(message.media, MessageMediaPhoto):
                file_path = await client.download_media(message.media, file="static/news_photos/")
                image_url = file_path
            elif isinstance(message.media, MessageMediaDocument):
                if message.file and message.file.mime_type and message.file.mime_type.startswith("video"):
                    file_path = await client.download_media(message.media, file="static/news_videos/")
                    video_url = file_path

        title = text[:50] if len(text) > 50 else text
        channel = await message.get_chat()

        with flask_app.app_context():
            news_item = News(
                channel_id=str(channel.id),
                telegram_message_id=message.id,
                title=title,
                text=text,
                image_url=image_url,
                video_url=video_url,
                is_approved=False
            )
            db.session.add(news_item)
            db.session.commit()
            logging.info(f"[TELEGRAM] –û–¥–∏–Ω–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel.title} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID={news_item.id}")

    async def process_album(grouped_id, client, flask_app):
        # –ñ–¥–µ–º ALBUM_TIMEOUT —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∞–ª—å–±–æ–º–∞
        await asyncio.sleep(ALBUM_TIMEOUT)
        album_messages = pending_albums.pop(grouped_id, [])
        if not album_messages:
            return

        media_urls = []
        text = album_messages[0].message or ""
        title = text[:50] if len(text) > 50 else text
        channel = await album_messages[0].get_chat()

        for msg in album_messages:
            if msg.media:
                if isinstance(msg.media, MessageMediaPhoto):
                    file_path = await client.download_media(msg.media, file="static/news_photos/")
                    media_urls.append(file_path)
                elif isinstance(msg.media, MessageMediaDocument):
                    if msg.file and msg.file.mime_type and msg.file.mime_type.startswith("video"):
                        file_path = await client.download_media(msg.media, file="static/news_videos/")
                        media_urls.append(file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–≥–æ –∞–ª—å–±–æ–º–∞.
        # –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-—Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ URL –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏.
        media_str = ",".join(media_urls)
        with flask_app.app_context():
            news_item = News(
                channel_id=str(channel.id),
                telegram_message_id=album_messages[0].id,  # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å grouped_id –≤–º–µ—Å—Ç–æ id –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                title=title,
                text=text,
                image_url=media_str,  # –ó–¥–µ—Å—å —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "url1,url2"
                video_url=None,
                is_approved=False
            )
            db.session.add(news_item)
            db.session.commit()
            logging.info(f"[TELEGRAM] –ê–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, ID={news_item.id}, media={media_urls}")

    logging.info("[TELETHON] Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

def main():
    configure_logging()
    app = create_app()
    
    print("\n=== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
    print(f"[CONFIG] –î–æ–º–µ–Ω: {Config.CLOUDFLARE_DOMAIN}")
    print(f"[CONFIG] Cloudflare: {'–í–∫–ª—é—á–µ–Ω' if Config.CLOUDFLARE_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    print(f"[CONFIG] –†–µ–∂–∏–º: {'Production' if not Config.DEBUG else 'Development'}")
    print(f"[CONFIG] URL: {Config.PUBLIC_URL}")
    print("=======================\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Cloudflare —Ç—É–Ω–Ω–µ–ª—å
    if Config.CLOUDFLARE_ENABLED:
        tunnel_process = start_cloudflare_tunnel()
        if not tunnel_process:
            print("[CLOUDFLARE] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å")
            return
        
        # –î–∞–µ–º —Ç—É–Ω–Ω–µ–ª—é –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, args=(app,))
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram —Å–∫—Ä–µ–π–ø–µ—Ä
    scraper_thread = threading.Thread(target=start_telegram_scraper, args=(app,))
    scraper_thread.daemon = True
    scraper_thread.start()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    if Config.CLOUDFLARE_ENABLED:
        site_url = f"https://{Config.CLOUDFLARE_DOMAIN}"
        if check_site_status(site_url):
            print(f"[SITE] üéâ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {site_url}")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===")
        print("[SITE] –°–∞–π—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("[CLOUDFLARE] –¢—É–Ω–Ω–µ–ª—å –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        print("===============================\n")
        if Config.CLOUDFLARE_ENABLED and tunnel_process:
            tunnel_process.terminate()
        os._exit(0)

if __name__ == "__main__":
    main()
